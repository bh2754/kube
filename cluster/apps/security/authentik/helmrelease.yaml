---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: security
spec:
  interval: 15m
  chart:
    spec:
      chart: authentik
      version: 2022.9.0
      sourceRef:
        kind: HelmRepository
        name: goauthentik-charts
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  dependsOn:
    - name: ingress-nginx
      namespace: nginx
  values:
    replicas: 1
    priorityClassName:
    securityContext: {}
    worker:
      replicas: 1
      priorityClassName:
      securityContext: {}
    image:
      repository: ghcr.io/goauthentik/server
      tag: 2022.9.0
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    # -- See https://github.com/k8s-at-home/library-charts/tree/main/charts/stable/common#values
    initContainers: {}
    # -- See https://github.com/k8s-at-home/library-charts/tree/main/charts/stable/common#values
    additionalContainers: {}
    ingress:
      enabled: true
      ingressClassName: "nginx"
      annotations: {}
      labels: {}
      hosts:
        - host: authentik.${SECRET_DOMAIN}
          paths:
            - path: "/"
              pathType: Prefix
      tls:
        - hosts:
            - *host
          secretName: ${SECRET_CERT}
    authentik:
      log_level: info
      secret_key: "!#sRI8SDs*J&tv$VgiBTmu&eERXyo*$*Z8EC^qqiIb*nPopGh7"
      # -- Path for the geoip database. If the file doesn't exist, GeoIP features are disabled.
      geoip: /geoip/GeoLite2-City.mmdb
      avatars: gravatar
      email:
        host: "smtp.office365.com"
        port: 587
        username: "brentharris@bharris.cc"
        password: "${SECRET_PASSWORD}"
        use_tls: true
        use_ssl: false
        timeout: 30
        # -- Email from address, can either be in the format "foo@bar.baz" or "authentik <foo@bar.baz>"
        from: "Authentik <brentharris@bharris.cc>"
      outposts:
        # -- Template used for managed outposts. The following placeholders can be used
        # %(type)s - the type of the outpost
        # %(version)s - version of your authentik install
        # %(build_hash)s - only for beta versions, the build hash of the image
        container_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
      error_reporting:
        # -- This sends anonymous usage-data, stack traces on errors and
        # performance data to sentry.beryju.org, and is fully opt-in
        enabled: false
        # -- This is a string that is sent to sentry with your error reports
        environment: "k8s"
        # -- Send PII (Personally identifiable information) data to sentry
        send_pii: false
      postgresql:
        # -- set the postgresql hostname to talk to
        # if unset and .Values.postgresql.enabled == true, will generate the default
        # @default -- `{{ .Release.Name }}-postgresql`
        host: 'postgres-rw.database.svc'
        # -- postgresql Database name
        # @default -- `authentik`
        name: "authentik"
        # -- postgresql Username
        # @default -- `authentik`
        user: "authentik"
        password: "${AUTHENTIK_POSTGRES_PASSWORD}"
        port: 5432
        s3_backup:
          # -- optional S3 backup, access key
          access_key: "${AUTHENTIK_ACCESS_KEY}"
          # -- optional S3 backup, secret key
          secret_key: "${AUTHENTIK_SECRET_KEY}"
          # -- optional S3 backup, bucket
          bucket: "${AUTHENTIK_BUKCKET}"
          # -- optional S3 backup, region
          region: ""
          # -- optional S3 backup, host, including protocol (https://minio.domain.tld)
          host: "https://minio.bharris.xyz"
          # -- optional S3 backup, location in the bucket
          # @default -- `"/"`
          location: ""
          # -- optional S3 backup, set to `true` to disable SSL certificate verification
          insecure_skip_verify: false
      redis:
        # -- set the redis hostname to talk to
        # @default -- `{{ .Release.Name }}-redis-master`
        host: 'redis-redis-ha-haproxy.database.svc'
        password: ""

    # -- List of config maps to mount blueprints from. Only keys in the
    # configmap ending with ".yaml" wil be discovered and applied
    blueprints: []

    # -- see configuration options at https://goauthentik.io/docs/installation/configuration/
    env: {}
    # AUTHENTIK_VAR_NAME: VALUE

    envFrom: []
    #  - configMapRef:
    #      name: special-config

    envValueFrom: {}
    #  AUTHENTIK_VAR_NAME:
    #    secretKeyRef:
    #      key: password
    #      name: my-secret

    service:
      # -- Service that is created to access authentik
      enabled: true
      type: LoadBalancer
      loadBalancerIP: "${METALLB_AUTHENTIK_ADDR}"
      spec:
        loadBalancerIP: "${METALLB_AUTHENTIK_ADDR}"
        externalTrafficPolicy: Local
    # port: 80
    # name: http
    # protocol: TCP
      labels: {}
      annotations: {}

    volumes: []

    volumeMounts: []

    # -- affinity applied to the deployments
    affinity: {}

    #  -- tolerations applied to the deployments
    tolerations: []

    # -- nodeSelector applied to the deployments
    nodeSelector: {}

    resources:
      server: {}
      worker: {}

    # WARNING! When initially deploying, authentik has to do a few DB migrations. This may cause it to die from probe
    # failure, but will continue on reboot. You can disable this during deployment if this is not desired
    livenessProbe:
      # -- enables or disables the livenessProbe
      enabled: true
      httpGet:
        # -- liveness probe url path
        path: /-/health/live/
        port: http
      initialDelaySeconds: 50
      periodSeconds: 10

    readinessProbe:
      enabled: true
      httpGet:
        path: /-/health/ready/
        port: http
      initialDelaySeconds: 50
      periodSeconds: 10

    serviceAccount:
      # -- Service account is needed for managed outposts
      create: true

    prometheus:
      serviceMonitor:
        create: false
        interval: 30s
        scrapeTimeout: 3s
      rules:
        create: false

    geoip:
      # -- optional GeoIP, deploys a cronjob to download the maxmind database
      enabled: true
      # -- sign up under https://www.maxmind.com/en/geolite2/signup
      accountId: "723466"
      # -- sign up under https://www.maxmind.com/en/geolite2/signup
      licenseKey: "pWqND1qw7ujXD3cV"
      editionIds: "GeoLite2-City"
      image: maxmindinc/geoipupdate:v4.10
      # -- number of hours between update runs
      updateInterval: 8

    postgresql:
      # -- enable the bundled bitnami postgresql chart
      enabled: false
      postgresqlUsername: "authentik"
      # postgresqlPassword: ""
      postgresqlDatabase: "authentik"
      # persistence:
      #   enabled: true
      #   storageClass:
      #   accessModes:
      #     - ReadWriteOnce
    redis:
      # -- enable the bundled bitnami redis chart
      enabled: false
      architecture: standalone
      auth:
        enabled: false
