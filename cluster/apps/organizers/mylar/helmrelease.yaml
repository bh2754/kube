--- #
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: mylar
  namespace: organizers
spec:
  releaseName: mylar
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: app-template
      version: 1.1.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
      interval: 5m
  dependsOn:
    - name: ingress-nginx
      namespace: nginx
    - name: downloads-gateway
      namespace: vpn
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    image:
      repository: ghcr.io/linuxserver/mylar3
      tag: latest
    env:
      TZ: ${TZ}
      MYLAR__INSTANCE_NAME: Mylar
      MYLAR__PORT: &port  8090
    service:
      main:
        ports:
          http:
            port: *port

    ingress:
      main:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          auth.home.arpa/enabled: "true"
          nginx.ingress.kubernetes.io/configuration-snippet: |-
            proxy_set_header Accept-Encoding "";
            sub_filter '</head>' '<link rel="stylesheet" type="text/css" href="https://theme-park.${SECRET_PUBLIC_DOMAIN}/css/base/mylar3/hotline.css"></head>';
            sub_filter_once on;
          hajimari.io/enable: "true"
        hosts:
          - host: &host mylar.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
        tls:
          - secretName: "mylar-tls"
            hosts:
              - *host
    persistence:
      config:
        enabled: true
        mountPath: "/config"
        existingClaim: mylar-config-v1
      media:
        enabled: true
        type: nfs
        server: "${NFS_SERVER}"
        path: "${NFS_MEDIA}"
      downloads:
        enabled: true
        type: nfs
        server: "${NFS_SERVER}"
        path: "${NFS_DOWNLOAD}"
    podAnnotations:
      backup.velero.io/backup-volumes: config
    resources:
      requests:
        cpu: 10m
        memory: 64M
      limits:
        memory: 83M
